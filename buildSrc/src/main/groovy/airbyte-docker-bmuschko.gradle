import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

class AirbyteDockerBmuschkoPluginConfiguration {
    String imageName
    String taskName = 'buildDockerImage'
}

class AirbyteDockerBmuschkoPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('airbyteDockerBmuschko', AirbyteDockerBmuschkoPluginConfiguration)

        // The extension.imageName value isn't available until after configurations are evaluated. See https://stackoverflow.com/a/23962365
        project.afterEvaluate {
            def buildDockerImageTask = createTask(project, extension.taskName, extension.imageName, "Dockerfile")
            createTask(project, "${extension.taskName}Test", extension.imageName, "Dockerfile.test")

            project.assemble.dependsOn buildDockerImageTask
        }
    }

    static def createTask(Project project, String taskName, String imageName, String dockerfileName) {
        if (project.file(dockerfileName).exists()) {
            def copyDockerfileTask = project.task("copyDockerBmuschko", type: Sync) {
                from "${project.projectDir}/${dockerfileName}"
                into "build/docker/"
            }

            def copyGeneratedTarTask = project.task("copyGeneratedTar", type: Copy) {
                dependsOn copyDockerfileTask
                dependsOn project.distTar

                from('build/distributions') {
                    include "${imageName}-*.tar"
                }
                into 'build/docker/bin'
            }

            def buildDockerImageTask = project.task(taskName, type: DockerBuildImage) {
                dependsOn copyGeneratedTarTask

                def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'

                def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
                def isArm64 = arch == "aarch64" || arch == "arm64"

                def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
                def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
                def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:1.19-alpine' : 'amd64/nginx:1.19-alpine'
                def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:${jdkVersion}-slim" : "amd64/openjdk:${jdkVersion}-slim"
                def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'

                inputDir = project.file("${project.projectDir}/build/docker")
                platform = buildPlatform
                images.add("airbyte/${imageName}:${project.rootProject.ext.image_tag}")
                buildArgs.put('JDK_VERSION', jdkVersion)
                buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
                buildArgs.put('ALPINE_IMAGE', alpineImage)
                buildArgs.put('NGINX_IMAGE', nginxImage)
                buildArgs.put('JDK_IMAGE', openjdkImage)
                buildArgs.put('VERSION', "${project.rootProject.ext.version}")

                dockerFile = project.file("build/docker/${dockerfileName}")
            }

            return buildDockerImageTask
        } else {
            project.task(taskName) {
                logger.info "Skipping ${taskName} because ${dockerfileName} does not exist."
            }
        }
    }
}

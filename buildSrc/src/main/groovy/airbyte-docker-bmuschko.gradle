import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

class AirbyteDockerBmuschkoConfiguration {
    Map<String, String> dockerfileToImageName
}

class AirbyteDockerBmuschkoPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('airbyteDockerBmuschko', AirbyteDockerBmuschkoConfiguration)

        // These configurations aren't available until after Gradle fully evaluates the project, so we need to wait until that happens.
        project.afterEvaluate {
            def dockerfileToImageName = extension.dockerfileToImageName
            // For convenience: if the image name is not specified for 'Dockerfile', we default to using the project name (e.g. 'destination-s3')
            if (!dockerfileToImageName) {
                dockerfileToImageName = ['Dockerfile': project.name]
            } else if (!dockerfileToImageName.containsKey('Dockerfile')) {
                dockerfileToImageName['Dockerfile'] = project.name
            }

            dockerfileToImageName.each(entry -> {
                def dockerfileName = entry.getKey()
                def imageName = entry.getValue()

                // For the Dockerfile task, we want to use the name buildDockerImage rather than buildDockerImage-Dockerfile
                // (again, this is just for convenience)
                def taskName = 'buildDockerImage'
                if (!'Dockerfile'.equals(dockerfileName)) {
                    taskName += "-${dockerfileName}"
                }

                def buildDockerImageTask = createTask(project, taskName, imageName, dockerfileName)
            })
        }
    }

    static def createTask(Project project, String taskName, String imageName, String dockerfileName) {
        if (project.file(dockerfileName).exists()) {
            def buildDockerImageTask = project.task(taskName, type: DockerBuildImage) {
                // If this is a Java project, then we can't run the Docker build until after the compiled tar exists
                dependsOn project.assemble

                def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'

                def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
                def isArm64 = arch == "aarch64" || arch == "arm64"

                def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
                def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
                def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:1.19-alpine' : 'amd64/nginx:1.19-alpine'
                def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:${jdkVersion}-slim" : "amd64/openjdk:${jdkVersion}-slim"
                def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'

                inputDir = project.file("${project.projectDir}")
                platform = buildPlatform
                images.add("airbyte/${imageName}:${project.rootProject.ext.image_tag}")
                buildArgs.put('JDK_VERSION', jdkVersion)
                buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
                buildArgs.put('ALPINE_IMAGE', alpineImage)
                buildArgs.put('NGINX_IMAGE', nginxImage)
                buildArgs.put('JDK_IMAGE', openjdkImage)
                buildArgs.put('VERSION', "${project.rootProject.ext.version}")

                dockerFile = project.file("${dockerfileName}")
            }

            // This probably isn't actually necessary, but keeping it for compatibility with the old airbyte-docker plugin
            project.build.dependsOn buildDockerImageTask

            return buildDockerImageTask
        } else {
            project.task(taskName) {
                logger.info "Skipping ${taskName} because ${dockerfileName} does not exist."
            }
        }
    }
}
